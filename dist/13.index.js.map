{"version":3,"sources":["webpack:///./sources/game/models/systems/common/forces.js"],"names":["forces","entities","Object","entries","forEach","entity","forcesComponent","get","positionComponent","trashes","parts","force","unlimited","ending","remaining","duration","elapsed","delta","progress","source","easing","models","snippets","scope","name","Ease","moved","x","y","handling","push","indexOf","filter"],"mappings":"siBAEA,SAASA,EAAOC,GAAU,WAEtBC,OAAOC,QAAQF,GAAUG,SAAQ,YAAoB,aAAZC,GAAY,WAE3CC,EAAkBD,EAAOE,IAAI,UAC7BC,EAAoBH,EAAOE,IAAI,YAE/BE,EAAU,GAEhBH,EAAgBI,MAAMN,SAAQ,SAACO,GAE3B,IAAMC,GAA6B,IAAjBD,EAAME,OAClBC,EAAYH,EAAMI,SAAWJ,EAAMK,QACnCC,GAAuB,IAAdL,GAAuB,EAAKK,MAAQH,EAAaA,EAAY,EAAKG,MAE3EC,GAAYP,EAAMK,QAAUC,GAASN,EAAMI,SAE3CI,EAASR,EAAMS,OACfA,GAA2B,IAAjBT,EAAMS,OAAmB,EAAKC,OAAOC,SAASH,EAAOI,OAAOJ,EAAOK,QAAUC,IAAY,GAEnGC,EAAQ,CAEV,EAAKf,EAAMgB,EAAIP,EAAOF,GACtB,EAAKP,EAAMiB,EAAIR,EAAOF,IAQ1B,GALAV,EAAkBmB,GAAKD,EAAMC,EAAIhB,EAAMe,MAAMC,EAC7CnB,EAAkBoB,GAAKF,EAAME,EAAIjB,EAAMe,MAAME,EAC7CjB,EAAMe,MAAQA,EAEdf,EAAMK,SAAW,EAAKC,OACC,IAAnBN,EAAMkB,SAAoB,CAE1B,IAAMV,EAASR,EAAMkB,UAQrBA,EAPiB,EAAKR,OAAOC,SAASH,EAAOI,OAAOJ,EAAOK,OAOlDnB,EAAQM,EAAMe,MAAMC,EAAGhB,EAAMe,MAAME,EAAGjB,EAAMK,SALtC,WAEXP,EAAQqB,KAAKnB,MAMrB,GAAIA,EAAMK,SAAWL,EAAMI,WACP,IAAjBJ,EAAME,SACsB,IAA5BJ,EAAQsB,QAAQpB,GAAe,CAE9B,IAAMQ,EAASR,EAAME,QAGrBA,EAFe,EAAKQ,OAAOC,SAASH,EAAOI,OAAOJ,EAAOK,OAElDnB,EAAQM,EAAMe,MAAMC,EAAGhB,EAAMe,MAAME,EAAGjB,EAAMK,SACnDP,EAAQqB,KAAKnB,OAIrBL,EAAgBI,MAAQJ,EAAgBI,MAAMsB,QAAO,SAACrB,GAElD,OAAmC,IAA5BF,EAAQsB,QAAQpB","file":"13.index.js","sourcesContent":["import * as Ease from 'modules/ease.js';\n\nfunction forces(entities) {\n\n    Object.entries(entities).forEach(([name, entity]) => {\n\n        const forcesComponent = entity.get('forces');\n        const positionComponent = entity.get('position');\n\n        const trashes = [];\n\n        forcesComponent.parts.forEach((force) => {\n\n            const unlimited = force.ending === false;\n            const remaining = force.duration - force.elapsed;\n            const delta = (unlimited === false && this.delta > remaining) ? remaining : this.delta;\n\n            const progress = (force.elapsed + delta) / force.duration;\n\n            const source = force.easing;\n            const easing = (force.easing !== false ? this.models.snippets[source.scope][source.name]() : Ease.linear(1));\n\n            const moved = {\n\n                'x': force.x * easing(progress),\n                'y': force.y * easing(progress)\n            };\n\n            positionComponent.x += moved.x - force.moved.x;\n            positionComponent.y += moved.y - force.moved.y;\n            force.moved = moved;\n\n            force.elapsed += this.delta;\n            if (force.handling !== false) {\n\n                const source = force.handling;\n                const handling = this.models.snippets[source.scope][source.name];\n\n                const remove = () => {\n\n                    trashes.push(force);\n                };\n\n                handling(entity, force.moved.x, force.moved.y, force.elapsed, remove);\n            }\n\n            if (force.elapsed >= force.duration\n            && force.ending !== false\n            && trashes.indexOf(force) === -1) {\n\n                const source = force.ending;\n                const ending = this.models.snippets[source.scope][source.name];\n\n                ending(entity, force.moved.x, force.moved.y, force.elapsed);\n                trashes.push(force);\n            }\n        });\n\n        forcesComponent.parts = forcesComponent.parts.filter((force) => {\n\n            return trashes.indexOf(force) === -1;\n        });\n    });\n}\n\nexport {forces};\n"],"sourceRoot":""}